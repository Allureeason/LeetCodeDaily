/*
    2021 -04 -21

    题目：解码方法
    一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：

    'A' -> 1
    'B' -> 2
    ...
    'Z' -> 26


    要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：

    "AAJF" ，将消息分组为 (1 1 10 6)
    "KJF" ，将消息分组为 (11 10 6)
    注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。
    给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。



    解题思路： 这道题使用的是动态规划的方法， 我觉得和排列组合有点类似
                比如 226 ， 我们先看前面第一位， 它肯定只有一种组合方式 2
                看前两位 22， 可以看出 2、2 和 22 就有两种组合
                看前三位 226，可以看出2、2、6和22、6 还有 2 、26
                就是后面的一位取决于前面的组合数
                只不过这里有点限制，就是当前位和前面的某一组合时要满足组合成的数小于等于26

    状态方程： dp[i] += dp[i-1]    s[i-1] != '0' 的情况
              dp[i] += dp[i-2]     i > 1 && s[i-2] != '0' && (s[i-2] - '0') * 10 + (dp[i-1] - '0') <= 26


    看代码：
*/

#include <string>
#include <vector>

using namespace std;

class Solution {
public:
    int numDecodings(string s) {
        int n = s.size();

        vector<int> dp(n+1);
        dp[0] = 1;
        for (int i = 1; i <= n; i++) {
            if (s[i-1] != '0') {
                dp[i] += dp[i-1];
            }
            if (i > 1 && s[i-2] != '0' && ((s[i-2] - '0') * 10 + (s[i-1] - '0')) <= 26) {
                dp[i] += dp[i-2];
            }
        }
        return dp[n];
    }
};

